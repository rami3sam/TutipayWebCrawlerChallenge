/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.rami3sam.crawler;

import org.jsoup.Jsoup;
import org.jsoup.UnsupportedMimeTypeException;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Pattern;

public class Util {

    static Pattern urlWithSchemeRegexp = Pattern.compile("[a-z+-.]+:.*", Pattern.CASE_INSENSITIVE);

    public static ArrayList<String> getPageLinks(String pageURL) {
        try {

            URI pageURI = new URI(pageURL);
            Document document = Jsoup.connect(pageURL).get();

            Main.outputFileWriter.write(pageURL+"  -------------->  "+ document.title()+"\n");

            Elements anchorTags = document.getElementsByTag("a");

            ArrayList<String> links = new ArrayList<>();

            for (Element anchorTag : anchorTags) {
                String scrapedURL = anchorTag.attr("href");

                String url = processURL(pageURI, scrapedURL);
                if (url != null) {
                    links.add(url);
                }

            }


            return links;

            //handle the exception of the function being given a malformed url
        } catch (URISyntaxException e) {
            e.printStackTrace(System.err);
            return null;
            // handle the exception of the function not being able to start the connection
        } catch (UnsupportedMimeTypeException e) {
            //e.printStackTrace(System.err);
            return null;
        } catch (IOException e) {
            //e.printStackTrace(System.err);
            return null;
        }
    }

    public static String processURL(URI pageURI, String scrapedURL) {
        try {
            URI scrapedURI = null;
            if (scrapedURL.startsWith("//")) {
                // deal with absent scheme
                String scrapedURLWithoutSlashes = scrapedURL.replaceFirst("/+", "");
                scrapedURLWithoutSlashes = pageURI.getScheme() + "://" + scrapedURLWithoutSlashes;
                scrapedURI = new URI(scrapedURLWithoutSlashes);
            } else if (scrapedURL.startsWith("/")) {
                // deal with url relative to root
                scrapedURI = new URI(pageURI.getScheme(), pageURI.getAuthority(), scrapedURL, "", "");
            } else if (scrapedURL.startsWith("?")) {
                // deal with url containing only the query
                scrapedURI = new URI(pageURI.getScheme(), pageURI.getAuthority(), pageURI.getPath(), scrapedURL, "");
            } else if (scrapedURL.startsWith("#")) {
                // deal with url containing only a fragment
                scrapedURI = new URI(pageURI.getScheme(), pageURI.getAuthority(), pageURI.getPath(), "", scrapedURL);
            } else if (scrapedURL.equals("")) {
                // deal with an empty url
                scrapedURI = pageURI;
            } else if (!urlWithSchemeRegexp.matcher(scrapedURL).find()) {
                scrapedURI = !pageURI.getPath().endsWith("/") ? pageURI.resolve("../" + scrapedURL) : pageURI.resolve( scrapedURL);
            } else {
                scrapedURI = new URI(scrapedURL);
            }

            if (scrapedURI != null && checkForCrawlableURLScheme(scrapedURI)) {
                String query = (scrapedURI.getQuery() != null) ? scrapedURI.getQuery() : "";

                // Scheme and authority are converted to lowercase because they are case-insensitive and fragment is neglected
                String url = scrapedURI.getScheme().toLowerCase() + "://" + scrapedURI.getAuthority().toLowerCase() + scrapedURI.getPath() + query;

                // strip last / to minimize duplicates
                if (url.endsWith("/")) {
                    url = url.substring(0, url.length() - 1);
                }
                //strip it of spaces as a sanity check
                url = url.strip();
                return url;
            } else {
                return null;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static boolean checkForCrawlableURLScheme(URI uri) {
        String protocol = uri.getScheme();
        return protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https");
    }

    public static boolean isOneSubdomainOfTheOther(String a, String b) {

        try {
            URL first = new URL(a);
            String firstHost = first.getHost();
            firstHost = firstHost.startsWith("www.") ? firstHost.substring(4) : firstHost;

            URL second = new URL(b);
            String secondHost = second.getHost();
            secondHost = secondHost.startsWith("www.") ? secondHost.substring(4) : secondHost;

            /*
             Test if one is a substring of the other
             */
            if (firstHost.contains(secondHost) || secondHost.contains(firstHost)) {

                String[] firstPieces = firstHost.split("\\.");
                String[] secondPieces = secondHost.split("\\.");

                String[] longerHost = {""};
                String[] shorterHost = {""};

                if (firstPieces.length >= secondPieces.length) {
                    longerHost = firstPieces;
                    shorterHost = secondPieces;
                } else {
                    longerHost = secondPieces;
                    shorterHost = firstPieces;
                }
                //int longLength = longURL.length;
                int minLength = shorterHost.length;
                int i = 1;

                /*
                 Compare from the tail of both host and work backwards
                 */
                while (minLength > 0) {
                    String tail1 = longerHost[longerHost.length - i];
                    String tail2 = shorterHost[shorterHost.length - i];

                    if (tail1.equalsIgnoreCase(tail2)) {
                        //move up one place to the left
                        minLength--;
                    } else {
                        //domains do not match
                        return false;
                    }
                    i++;
                }
                if (minLength == 0) //shorter host exhausted. Is a sub domain
                    return true;
            }
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
        return false;
    }
}
